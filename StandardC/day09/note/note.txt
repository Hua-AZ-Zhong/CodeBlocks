结构体变量可以作为函数的参数和返回值使用，
但是最好使用结构体变量的地址而不是变量
本身。

字节对齐指计算机在分配变量地址的时候必须让
首字节地址能够被变量的大小整除。如果变量大小
超过4个字节按四个字节计算。

补齐指结构体的大小必须是其中最大的简单变量
大小的整数倍。如果变量大小超过4个字节按照
4个字节计算。

联合也可以包含多个基本变量声明，但是这些
基本变量都从同一个地址开始分配，它们代表
了对同样一组字节的不同使用方式。

大小端描述了计算机存储数字的顺序，小端
指的是把数字的最低数位存储在地址最小的
字节中，大端指的是把数字的最高数位存储在
地址最小的字节中。

网络上所有数据按照大端方式存储，这叫做网络
字节序列。

void*是一种指针类型，这种类型的指针变量里
可以记录任何地址数据。在使用这样的地址数据
之前一定要强制转换为另外一种指针类型。

为了从堆中分配变量需要使用函数malloc，它需要
一个参数指定需要分配的空间有多少个字节，它
把分配好的空间的首字节地址作为返回值。它有可能
会失败，如果失败则返回NULL。
当使用完堆中的变量以后需要使用函数free函数
把这些变量所占用的空间释放掉，这个函数的参数
表示分配得到的地址。
为了使用堆相关的各种操作函数需要包含头文件
stdlib.h。

函数calloc也可以用于从堆中分配变量，而且它分配
的变量都一定是被清0的。

函数realloc可以把一段已经分配好的内存空间调整
成新的大小。它可能会改变空间的地址但会保留原
空间中的数据。它如果失败则会返回NULL，失败的
时候原有空间保持不变。
realloc函数有两个参数，第一个参数表示原有空间
的地址，第二个参数表示调整后的空间大小。如果
第一个参数为NULL则效果类似malloc,如果第二个
参数为0则效果类似free。

const int *和int * const不一样，前一种表示
不可以通过这个指针修改别的变量但是指针本身
可以被修改，后一种表示指针本身不可以被修改
但是可以通过它修改别的变量。




