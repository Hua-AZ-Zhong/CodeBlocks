位运算符（对一个数字的二进制表现形式进行
计算的符号）包括|(按位或)，&（按位与），
^（按位亦或）。这三个位运算符都是双目运算符，
他们都是对两个数字的二进制表示形式中对应
数位上的二进制数字进行计算的。如果对应数位
中有一个1则按位或计算结果中的对应数位
上就是1，否则就是0.如果对应数位中有一个是0
则按位与计算结果中的对应数位上就是0，否则
就是1.如果对应数位上数字一样则按位亦或计算
结果数字的对应数位上是0，否则是1.

~(按位取反)也是一个位运算符，它是单目运算符。
它可以把一个数字的二进制表示形式中所有
数位求反。

左移(<<)和右移(>>)也是位运算符，他们可以把
一个数字的二进制表示形式向左或向右移动
指定位数。右移操作在左边补充的是符号位
的数字。

&运算符可以获得一个变量的地址，*运算符
可以在代码中通过地址数据表示对应的变量。

三目运算符的格式如下
(逻辑表达式) ? 结果1 ： 结果2
如果逻辑表达式计算结果是真则整个表达式的结果
是结果1，否则就是结果2.

if语句可以实现分支处理，语法格式如下
if（条件1) {   //只能出现一次
    条件1成立时的处理代码
}
else if (条件2) {  //可以出现任意多次，也可能不出现
    条件2成立时的处理代码
}
else {   //最多出现一次
    前面列出的所有条件都不成立时的处理代码
}

else关键字表示条件表达式之间的对立关系，也就是说
只能有一个条件表达式成立。如果多个逻辑表达式
是互补的，也就是说一定会有一个成立则最后一个
逻辑表达式可以省略。

switch...case写法也可以实现分支处理。当程序
中要对某一个数字的多种可能的取值进行分支处理
的时候就可以采用这种写法。

把一段代码反复执行的语句叫做循环语句，for语句
是一种循环语句。语法格式如下
int xun_huan = 0;
for (xun_huan = 0;xun_huan < 次数;xun_huan++) {
   要反复执行的代码
}
上面的代码可以控制大括号内部的语句执行指定的
次数。

假设有如下for语句
for (1;2;3) {
    4
}
for循环语句的执行顺序如下
[1, 2]   [4, 3, 2] [4, 3, 2] ...

continue;语句在循环中可以终止当次循环的执行
而立刻进入下一次循环

break;语句在循环中可以立刻终止整个循环的执行。




